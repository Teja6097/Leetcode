"""


Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100


"""



# Definition for singly-linked list.
class ListNode(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next



class Solution(object):
    def middleNode(self, head):
        
        if(head.next== None):
            return head
        l=0
        temp=head
        while(temp!=None):
            l=l+1
            temp=temp.next
        
        x=[]
        curr=head
        c=0
        while(curr!=None):
            if(c>=(l//2)):
                x.append(curr.val)
            c=c+1
            curr=curr.next
        a = head = ListNode(x[0])
        for i in range(1,len(x)):
            a.next=ListNode(x[i])
            a=a.next
        return head
